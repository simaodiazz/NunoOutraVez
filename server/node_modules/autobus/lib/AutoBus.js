"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return AutoBus;
    }
});
var _assert = /*#__PURE__*/ _interopRequireDefault(require("assert"));
var _localTransport = /*#__PURE__*/ _interopRequireDefault(require("./local/LocalTransport"));
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var AutoBus = /*#__PURE__*/ function() {
    "use strict";
    function AutoBus(transport) {
        _classCallCheck(this, AutoBus);
        this.middlewares = [];
        this.transport = transport || new _localTransport.default(this);
    }
    var _proto = AutoBus.prototype;
    _proto.use = function use(middleware) {
        this.middlewares.push(middleware);
    };
    _proto.send = function send(channel, message) {
        _assert.default.notStrictEqual(channel, undefined);
        return this.transport.send(channel, message);
    };
    _proto.publish = function publish(channel, message) {
        _assert.default.notStrictEqual(channel, undefined);
        return this.transport.publish(channel, message);
    };
    _proto.join = function join(channel, listener) {
        _assert.default.notStrictEqual(channel, undefined);
        return this.transport.join(channel, listener);
    };
    _proto.leave = function leave(channel, listener) {
        _assert.default.notStrictEqual(channel, undefined);
        return this.transport.leave(channel, listener);
    };
    _proto.deliver = function deliver(message, listener) {
        var _this = this;
        var i = 0;
        var next = function(err, msg) {
            var layer = _this.middlewares[i++];
            if (layer === undefined) {
                return listener(msg || {});
            }
            return layer(msg, next);
        };
        next(null, message);
    };
    return AutoBus;
}();
