import { Listener, Transport } from './local/LocalTransport';
export interface NextFunc<T> {
    (error: null, message: T): void;
    (error: Error, message: undefined): void;
    (error: Error | null, message?: T): void;
}
export interface Middleware<T> {
    (message: T, next: NextFunc<T>): void;
}
export default class AutoBus {
    private readonly middlewares;
    private readonly transport;
    constructor(transport?: Transport);
    use<T>(middleware: Middleware<T>): void;
    send<T>(channel: string, message: T): void;
    publish<T>(channel: string, message: T): void;
    join<T>(channel: string, listener: Listener<T>): Listener<T>;
    leave<T>(channel: string, listener: Listener<T>): void;
    deliver<T>(message: T, listener: Listener<T>): void;
}
