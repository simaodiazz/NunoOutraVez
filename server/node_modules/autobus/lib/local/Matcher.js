"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
var Matcher = /*#__PURE__*/ function() {
    "use strict";
    function Matcher() {
        _classCallCheck(this, Matcher);
        this._matchers = [];
    }
    var _proto = Matcher.prototype;
    _proto.add = function add(criteria, data) {
        this._matchers.push({
            criteria: this.makeRegEx(criteria),
            data: data || true
        });
    };
    _proto.match = function match(criteria) {
        var matches = [];
        this._matchers.forEach(function(matcher) {
            if (criteria.match(matcher.criteria)) {
                matches.push(matcher.data);
            }
        });
        return matches;
    };
    _proto.remove = function remove(criteria, data) {
        this._matchers = this._matchers.filter(function(matcher) {
            return criteria !== matcher.criteria && data !== matcher.data;
        });
    };
    _proto.makeRegEx = function makeRegEx(criteria) {
        var re = "^".concat(this.pregQuote(criteria).replace(/\\\*/g, ".*").replace(/\\\?/g, "."), "$");
        return new RegExp(re, "g");
    };
    _proto.isWildcardChannel = function isWildcardChannel(str) {
        return str.indexOf("*") >= 0 || str.indexOf("?") >= 0;
    };
    _proto.pregQuote = function pregQuote(str, delimiter) {
        // http://kevin.vanzonneveld.net
        // +   original by: booeyOH
        // +   improved by: Ates Goral (http://magnetiq.com)
        // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
        // +   bugfixed by: Onno Marsman
        // +   improved by: Brett Zamir (http://brett-zamir.me)
        // *     example 1: preg_quote("$40");
        // *     returns 1: '\$40'
        // *     example 2: preg_quote("*RRRING* Hello?");
        // *     returns 2: '\*RRRING\* Hello\?'
        // *     example 3: preg_quote("\\.+*?[^]$(){}=!<>|:");
        // *     returns 3: '\\\.\+\*\?\[\^\]\$\(\)\{\}\=\!\<\>\|\:'
        return "".concat(str).replace(new RegExp("[.\\\\+*?\\[\\^\\]$(){}=!<>|:\\".concat(delimiter || "", "-]"), "g"), "\\$&");
    };
    return Matcher;
}();
var _default = Matcher;
