import AutoBus from '../AutoBus';
export interface Listener<T> {
    (message: T): void;
}
export interface Transport {
    send<T>(channel: string, data: T): void;
    publish<T>(channel: string, data: T): void;
    join<T>(channel: string, listener: Listener<T>): Listener<T>;
    leave<T>(channel: string, listener: Listener<T>): void;
}
export default class LocalTransport implements Transport {
    private readonly bus;
    private readonly wildcardMatchers;
    private readonly channelListeners;
    constructor(bus: AutoBus);
    send<T>(channel: string, data: T): void;
    publish<T>(channel: string, data: T): void;
    join<T>(channel: string, listener: Listener<T>): Listener<T>;
    leave<T>(channel: string, listener: Listener<T>): void;
    private getListeners;
}
